/*
 * SOLUTION. Mario.
 */

function mario() {
  let height = -1;
  // This line declares height as an "incorrect" value so as to force the prompt to load, asking for the variable until correct
  //(see explanation of the while loop below)

  while (height < 1 || height > 23) {
  // This line establishes a while loop to allow for reprompting when variables don't meet parameters and to begin the function when 
  //the parameters are correct
    height = Number(prompt("Height: "));
// This line reprompts for height for as long as the height does not fit the given parameters

    if (height === null) {
      break;
      // This line closes the loop where a response is not given
    } else if (Number.isNaN(height)) {
      height = -1;
      // This line determines whether the height is a number, and if it isn't redeclares height as an "incorrect" variable to begin
      //the while loop all over again
    } else if (!Number.isInteger(height)) {
      height = -1;
      // This line does the same thing as above, except where the height isn't an integer rather than a number
    }
  }

  if (height !== null) {
  // This line ensures that height has been given a value to allow the code to run
    let output = "<code>";
  // This line fixes the spacing using a code tag
    let space = "&nbsp;";
 // This line fixes the spacing by using a monospaced blank rather than just a space
    let block = "#";
 // This line creates a variable to be concatenated later

    for (let row = 1; row <= height; row++) {
    // This line initializes a for loop to run for each row. It repeats the loop body for each row until it has reached the input height
      for (let i = 0; i < height - row; i++) {
    // This line creates a nested for loop to allow for a specific number of spaces (dependent on the line). It works on the principle
    //that for each line, there are as many spaces as the row number minus the row counter variable because the blocks move in.
        output = output + space;
   // This line adds a space to the existing output variable
      }
      for (let j = 0; j < row + 1; j++) {
   // This line initializes another for loop that runs for each block, running on the principle that each row has one more 
   //block than its row counter number
        output = output + block;
    // This line adds a block to the existing output variable
      }
      output = output + "<br>";
      // This line adds a line break to create separate rows
    }
    output = output + "</code>";
    // This line ensures the output is spaced correctly

    document.getElementById("mario-easy-output").innerHTML = output;
    // This line gets the output Id and outputs the output variable itself to it
  } else {
    document.getElementById("mario-easy-output").innerHTML = "";
    // This line (else clause) renders nothing if the parameters from before are not satisfied
  }

  check("mario", height);
  // This line checks that the output is correct.
}

/*
 * SOLUTION. Mario, Again.
 */

function marioAgain() {
  let height = -1;
//This line initializes the variable as being incorrect to force it to prompt later
  while (height < 1 || height > 23) {
  //This line creates a while loop that runs the code if the variable is in the correct parameters
    height = Number(prompt("Height: "));
    //This line prompts the user for height

    if (height === null) {
      break;
      //This line closes the prompt if no input is given
    } else if (Number.isNaN(height)) {
      height = -1;
      //This line resets the height to an incorrect parameter if the else if check finds it's not a number, making the while loop
      //reprompt it for a correct number
    } else if (!Number.isInteger(height)) {
      height = -1;
      //This line does the same as above, but with integers rather than numbers
    }
  }

  if (height !== null) {
    let output = "<code>";
    //This line ensures the spacing is correct
    let space = "&nbsp;";
    //This line ensures the right spacing is used
    let block = "#";
    //This line creates a variable to be used in concatenation later

    for (let row = 1; row <= height; row++) {
    //This line initializes a for loop that runs for each row
      for (let i = 0; i < height - row; i++) {
      //This line loops for the spaces, working on the principle there are as many spaces to each row as the row minus the counter
        output = output + space;
        //This line adds spaces to the existing output variable
      }
      for (let j = 0; j < row + 1; j++) {
      //This line  loops for blocks, on the principle there is one more block than the row number
        output = output + block;
        //This line adds blocks to the existing output variable
      }
      output = output + space + space;
      //This line adds two spaces to separate the two half-pyramids

      for (let k = 0; k < row + 1; k++) {
      //This line begins another loop to add a second round of blocks
        output = output + block;
        //This line adds blocks to the existing output variable
      }
      output = output + "<br>";
      //This line adds a line break, separating each row's output
    }
    output = output + "</code>";
    //This line ensures the spacing is correct

    document.getElementById("mario-hard-output").innerHTML = output;
    //This line outputs the output variable itself
  } else {
    document.getElementById("mario-hard-output").innerHTML = "";
    //This line (else clause) renders nothing if the parameters from before are not satisfied.
  }

  check("mario-again", height);
  // This line checks that the output is correct.
}

/*
 * SOLUTION. Credit.
 */

function credit() {
  let card = "invalid";
//This line declares and initializes the variable as incorrect  to force a prompt later
  while (!Number.isInteger(card)) {
  //This line creates a while loop to force a prompt when the parameters are incorrect
    card = Number(prompt("Card Number: "));
    //This line reprompts the user for a card number

    if (card === null) {
    //This line breaks the prompt if nothing is entered
      break;
    }
  }

  let prev;
  //This line declares a variable used later
  if (card !== null) {
  //This line creates an if loop that runs if the input is not empty
    let number = card;
  //This line declares a variable used later
    let sumMultDigits = 0;
  //This line declares a variable used later
    let sumNonMultDigits = 0;
  //This line declares a variable used later
    let numDigits = 0;
  //This line declares a variable used later
    let current = -1;
  //This line declares a variable used later
    let previous = -1;
  //This line declares a variable used later
    let multiply = false;
  //This line declares a variable used later

    while (number > 0) {
  //This line creates a while loop to run the code when the number is not zero.
      digit = number % 10;
  //This line divides the number by 10 and returns the result to test what the last digit is
      numDigits++;
  //This line adds to the number of digits, used later in the algorithm.

      let tmp = current;
  //This line declares a variable used later
      current = digit;
  //This line updates current to be equal to the digit variable from before
      previous = tmp;
  //This line updates the previous variable from before

      if (multiply) {
  //This line begins an if loop to multiply every other number in accordance with Luhn's algorithm
        var product = digit * 2;
  //This line adds double of each digit to product
        var sum = 0;
  //This line declares sum to be 0

        while (product > 0) {
  //This line initializes a while loop to run while the product is a whole, positive number
          let temp = product % 10;
  //This line performs a modulus on the product for remainders of 10
          sum = sum + temp;
  //This line adds temp to the existing sum variable
          product = Math.floor(product / 10);
  //This line divides product by 10 and rounds down
        }

        sumMultDigits = sumMultDigits + sum;
  //This line adds "sum" to the existing sumMultiDigits variable
      } else {
        sumNonMultDigits = sumNonMultDigits + digit;
  //This line (else clause) adds the digits not multiplied by two to the digit total in accordance with Luhn's
      }

      multiply = !multiply;
  //This line converts the otherwise truthy value to falsey
      number = Math.floor(number / 10);
  //This line again divides number by 10 before rounding down
    }

    let checksum = ((sumNonMultDigits + sumMultDigits) % 10);
  //This line adds both sums and does a modulus 10 to find the tenth's remainder
    if (checksum === 0) {
      if (current === 4) {
  //These lines check variables checkSum and current for values 0 and 4 (Luhn's and first digit, respectively)
        if (numDigits === 13 || numDigits === 16) {
  //This line checks the length of the card number
          prev = document.getElementById("cc");
  //This line grabs the output and prepares the output
          if (prev) {
            prev.parentNode.removeChild(prev);
          }

          let visa = document.createElement("img");
  //This line prepares for the image output for visa
          visa.setAttribute("id", "cc");
  //This line prepares the data for the image id
          visa.setAttribute("src", "images/visa.png");
  //This line sets the data for the image id
          visa.setAttribute("width", "25%");
  //This line sets the dimensions for the image output
          document.getElementById("credit-output").innerHTML = "";
  //This line outputs a space
          document.getElementById("credit-output").appendChild(visa);
  //This line adds to the output
        }
      } else if (current === 3 && (previous === 4 || previous === 7)) {
  //This line checks the three variables for the ones expected with the card rules
        if (numDigits === 15) {
  //This line checks the length of the card
          prev = document.getElementById("cc");
  //This line prepares for the output
          if (prev) {
            prev.parentNode.removeChild(prev);
          }

          let amex = document.createElement("img");
  //See previous image preparation explanations (under amex)
          amex.setAttribute("id", "cc");
            //See previous image preparation explanations (under amex)
          amex.setAttribute("src", "images/amex.png");
            //See previous image preparation explanations (under amex)
          amex.setAttribute("width", "25%");
            //See previous image preparation explanations (under amex)
          document.getElementById("credit-output").innerHTML = "";
            //See previous image preparation explanations (under amex)
          document.getElementById("credit-output").appendChild(amex);
            //See previous image preparation explanations (under amex)
        }
      } else if (current === 5 && previous > 0 && previous < 6) {
      //This line checks the digits in accordance with the card number rules
        if (numDigits === 16) {
        //This line checks the card length
          prev = document.getElementById("cc");
          //This line prepares for output
          if (prev) {
            prev.parentNode.removeChild(prev);
          }

          var mc = document.createElement("img");
                      //See previous image preparation explanations (under amex)
          mc.setAttribute("id", "cc");
                      //See previous image preparation explanations (under amex)
          mc.setAttribute("src", "images/mastercard.png");
                      //See previous image preparation explanations (under amex)
          mc.setAttribute("width", "25%");
                      //See previous image preparation explanations (under amex)
          document.getElementById("credit-output").innerHTML = "";
                      //See previous image preparation explanations (under amex)
          document.getElementById("credit-output").appendChild(mc);
                      //See previous image preparation explanations (under amex)
        }
      }
    } else {
      document.getElementById("credit-output").innerHTML = "Invalid.";
      //This line declares the input invalid where it does not meet the criteria
    }
  } else {
    prev = document.getElementById("cc");
    if (prev) {
      prev.parentNode.removeChild(prev);
    }
    document.getElementById("credit-output").innerHTML = "";
    //This line renders nothing where parameters are invalid
  }

  check("credit", card);
  // This line checks that the output is correct.
}

/*
 * SOLUTION. Guess.
 */

function guess() {
  let target = Number((Math.random() * 1001).toFixed(0));
  //This line selects a random number, however because of the way the Math.random method works it must multiply and floor as well
  let guess = -1;
  //This line sets guess to an "incorrect" value to force a prompt later
  let attempts = 0;
  //This line initializes attempts and sets it to 0 to be increased later

  while (guess !== target) {
  //This line initializes a while loop that runs until the guess correct
    guess = Number(prompt("Guess: "));
    //This line prompts the user for a guess

    if (guess === null) {
    //This line breaks the loop if nothing is entered
      break;
    } else if (Number.isNan(guess)) {
    //This line resets and reprompts the guess if the input is not a number
      guess = -1;
    } else if (!Number.isInteger(guess)) {
    //This line does the same as above but with integers
      guess = -1;
    }

    if (guess > 0 && guess < 1001) {
    //This line checks that guess is within the correct parameters
      attempts++;
      //This line increases the attempt counter

      if (guess < target) {
      //This line checks if the guess is less than the target
        alert("Try something a little larger...");
        //This line alerts the user that the input was too small
      } else if (guess > target) {
      //This line checks if the guess is more than the target
        alert("Try something a little smaller...");
        //This line alerts the user that the input was too great
      }
    }
  }

  if (guess !== null) {
  //This line checks that guess has a value
    document.getElementById("guess-output").innerHTML = "Random Number: " + target + "<br>Attempts: " + attempts;
    //This line outputs the correct guess and number of attempts to the output field
  } else {
    document.getElementById("guess-output").innerHTML = "";
    //This line (else clause) renders nothing if the input was not in the correct parameters
  }

  check("guess");
  // This line checks that the output is correct.
}

/*
 * SOLUTION. Hurricane.
 */

function hurricane() {
  const CAT5 = 156;
  //This line declares a constant used later
  const CAT4 = 129;
  //This line declares a constant used later
  const CAT3 = 110;
  //This line declares a constant used later
  const CAT2 = 95;
  //This line declares a constant used later
  const CAT1 = 73;
  //This line declares a constant used later
  const TROP = 38;
  //This line declares a constant used later

  let windspeed = -1
  //This line declares the variable as incorrect to force a prompt
  while (windspeed < 0) {
  //This line creates a while to run the code while the parameters are met
    windspeed = Number(prompt("Windspeed: "));
  //This line prompts the user for a windspeed

    if (windspeed === null) {
  //This line breaks where there is no input
      break;
    } else if (Number.isNaN(windspeed)) {
  //This line resets and reprompts if the input is not a number
      windspeed = -1;
    } else if (!Number.isInteger(windspeed)) {
  //This line resets and reprompts if the input is not an integer
      windspeed = -1;
    }
  }

  if (windspeed !== null) {
  //This line begins a while loop to run the code when there's an input
    if (windspeed > CAT5) {
      document.getElementById("hurricane-output").innerHTML = "Category 5 Hurricane.";
  //This line outputs the category depending on the windspeed
    } else if (windspeed > CAT4) {
      document.getElementById("hurricane-output").innerHTML = "Category 4 Hurricane.";
        //This line outputs the category depending on the windspeed
    } else if (windspeed > CAT3) {
      document.getElementById("hurricane-output").innerHTML = "Category 3 Hurricane.";
        //This line outputs the category depending on the windspeed
    } else if (windspeed > CAT2) {
      document.getElementById("hurricane-output").innerHTML = "Category 2 Hurricane.";
        //This line outputs the category depending on the windspeed
    } else if (windspeed > CAT1) {
      document.getElementById("hurricane-output").innerHTML = "Category 1 Hurricane.";
        //This line outputs the category depending on the windspeed
    } else if (windspeed > TROP) {
      document.getElementById("hurricane-output").innerHTML = "Tropical Storm.";
        //This line outputs the category depending on the windspeed
    } else {
      document.getElementById("hurricane-output").innerHTML = "The skies are calm...";
        //This line outputs for when the category is not defined by Saffir-Simpson
    }
  } else {
    document.getElementById("hurricane-output").innerHTML = "";
    //This line renders nothing if the input is not within the parameters
  }

  check("hurricane", windspeed);
  // This line checks that the output is correct.
}

/*
 * SOLUTION. Gymnastics.
 */

function gymnastics() {
  let total = 0;
  //This line declares a variable for later
  let scores = [];
  //This line declares an array for later
  let valid = 0;
  //This line declares a variable for later
  let max = -1;
  //This line declares a variable for later
  let min = 11;
  //This line declares a variable for later
  let score = -1;
  //This line declares a variable for later

  while (valid < 6) {
  //This line runs a loop that will prompt 6 times for scores
    score = Number(prompt("Score: "));
    //This line prompts the user for a score

    if (score === null) {
      break;
      //This line breaks the loop if the input is blank
    } else if (Number.isNaN(score)) {
      score = -1;
      //This line resets and reprompts if the input isn't a number
    }

    if (score >= 0 && score <= 10) {
    //This line checks that scores are within the correct range
      valid++;
      //This line adds to a counter for number of valid scores
      scores.push(score);
      //This line adds the valid score to an array of other scores

      if (score < min) {
        min = score;
        //This line checks each score against the minimum, and redeclares the minimum as necessary
      }
      if (score > max) {
        max = score;
        //This line checks each score against the maximum, and redeclares the maximum as necessary
      }
      total = total + score;
      //This line adds each score to a running total
    }
  }

  if (score !== null) {
  //This line checks that the input isn't empty
    let sum = total;
    //This line declares the sum as the total
    sum = sum - min - max;
    //This line removes the minimum and maximum from the sum
    let average = (sum / 4.0).toFixed(2);
    //This line averages the remaining sum

    let result = `Discarded: ${min}, ${max}<br>Score: ${average}`;
    //This line templates the output
    document.getElementById("gymnastics-output").innerHTML = result;
    //This line outputs the result
  } else {
    scores = null;
    //This line (else clause) nullifies the scores if the input was null or didn't meet parameters from before
    document.getElementById("gymnastics-output").innerHTML = "";
    //This line renders nothing if the input was null or didn't meet parameters from before
  }

  check("gymnastics", scores);
  // This line checks that the output is correct.
}

/*
 * SOLUTION. Report Card.
 */

function reportCard() {
  let testTotal = 0;
  let quizTotal = 0;
  let homeworkTotal = 0;
  let tests = 0;
  let quizzes = 0;
  let homeworks = 0;

  let testScore = -2;
  while (testScore !== -1) {
    testScore = Number(prompt("Test: "));

    if (testScore === null) {
      break;
    } else if (Number.isNaN(testScore)) {
      testScore = -2;
    } else if (testScore === -1) {
       break;
    } else if (testScore >= 0 && testScore <= 100) {
      tests++;
      testTotal = testTotal + testScore;
    }
  }

  let quizScore = -2;
  while (quizScore !== -1) {
    quizScore = Number(prompt("Quiz: "));

    if (quizScore === null) {
      break;
    } else if (Number.isNaN(quizScore)) {
      quizScore = -2;
    } else if (quizScore === -1) {
       break;
    } else if (quizScore >= 0 && quizScore <= 100) {
      quizzes++;
      quizTotal = quizTotal + quizScore;
    }
  }

  let homeworkScore = -2;
  while (homeworkScore !== -1) {
    homeworkScore = Number(prompt("Homework: "));

    if (homeworkScore === null) {
      break;
    } else if (Number.isNaN(homeworkScore)) {
      homeworkScore = -2;
    } else if (homeworkScore === -1) {
       break;
    } else if (homeworkScore >= 0 && homeworkScore <= 100) {
      homeworks++;
      homeworkTotal = homeworkTotal + homeworkScore;
    }
  }

  let testAverage = null;
  let quizAverage = null;
  let homeworkAverage = null;
  let average = null;

  if (testScore === null || quizScore === null || homeworkScore === null) {
    document.getElementById("report-card-output").innerHTML = "";
  } else {
    testAverage = (testTotal / tests).toFixed(2);
    quizAverage = (quizTotal / quizzes).toFixed(2);
    homeworkAverage = (homeworkTotal / homeworks).toFixed(2);
    average = (testAverage * 0.6 + quizAverage * 0.3 + homeworkAverage * 0.1).toFixed(2);

    let result = `Tests: ${testAverage}<br>Quizzes: ${quizAverage}<br>Homework: ${homeworkAverage}<br>Grade: ${average}`;
    document.getElementById("report-card-output").innerHTML = result;
  }

  check("report-card", testTotal, tests, quizTotal, quizzes, homeworkTotal, homeworks);
  // This line checks that the output is correct.
}
